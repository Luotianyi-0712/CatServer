// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ChessRogueDiceInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from ChessRogueDiceInfo.proto</summary>
  public static partial class ChessRogueDiceInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for ChessRogueDiceInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChessRogueDiceInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDaGVzc1JvZ3VlRGljZUluZm8ucHJvdG8aEUxITUdMRUNDSUVBLnByb3Rv",
            "GhpDaGVzc1JvZ3VlRGljZVN0YXR1cy5wcm90bxoUQ2hlc3NSb2d1ZURpY2Uu",
            "cHJvdG8aGENoZXNzUm9ndWVEaWNlVHlwZS5wcm90bxoTUm9ndWVNb2RpZmll",
            "ci5wcm90byLbAwoSQ2hlc3NSb2d1ZURpY2VJbmZvEhQKC0dETktOR05LSEpN",
            "GLUDIAEoBRIVCg1jdXJfYnJhbmNoX2lkGA4gASgNEiIKC0lJQk9FQU9FSUFP",
            "GJgEIAEoCzIMLkxITUdMRUNDSUVBEhkKEWN1cl9zdXJmYWNlX2luZGV4GAwg",
            "ASgNEioKC2RpY2Vfc3RhdHVzGAIgASgOMhUuQ2hlc3NSb2d1ZURpY2VTdGF0",
            "dXMSEwoLY2hlYXRfdGltZXMYBSABKA0SHgoEZGljZRjMBiABKAsyDy5DaGVz",
            "c1JvZ3VlRGljZRIUCgtQQUNES0dESEhMShjsASADKA0SEAoIaXNfdmFsaWQY",
            "CyABKAgSJAoLTE5PRUtMT0lFR08YoAogASgLMg4uUm9ndWVNb2RpZmllchIT",
            "CgtGRkZKRFBIR0pISRgBIAEoDRIWCg5jdXJfc3VyZmFjZV9pZBgHIAEoDRIR",
            "CglicmFuY2hfaWQYBCABKA0SJgoJZGljZV90eXBlGAYgASgOMhMuQ2hlc3NS",
            "b2d1ZURpY2VUeXBlEhQKDHJlcm9sbF90aW1lcxgNIAEoDRIQCgdpc19kb25l",
            "GLQEIAEoCBIaChJzdXJmYWNlX2Rpc3BsYXlfaWQYCiABKA1CHqoCG0VnZ0xp",
            "bmsuRGFuaGVuZ1NlcnZlci5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.LHMGLECCIEAReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceStatusReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceTypeReflection.Descriptor, global::EggLink.DanhengServer.Proto.RogueModifierReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.ChessRogueDiceInfo), global::EggLink.DanhengServer.Proto.ChessRogueDiceInfo.Parser, new[]{ "GDNKNGNKHJM", "CurBranchId", "IIBOEAOEIAO", "CurSurfaceIndex", "DiceStatus", "CheatTimes", "Dice", "PACDKGDHHLJ", "IsValid", "LNOEKLOIEGO", "FFFJDPHGJHI", "CurSurfaceId", "BranchId", "DiceType", "RerollTimes", "IsDone", "SurfaceDisplayId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ChessRogueDiceInfo : pb::IMessage<ChessRogueDiceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChessRogueDiceInfo> _parser = new pb::MessageParser<ChessRogueDiceInfo>(() => new ChessRogueDiceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ChessRogueDiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.ChessRogueDiceInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo(ChessRogueDiceInfo other) : this() {
      gDNKNGNKHJM_ = other.gDNKNGNKHJM_;
      curBranchId_ = other.curBranchId_;
      iIBOEAOEIAO_ = other.iIBOEAOEIAO_ != null ? other.iIBOEAOEIAO_.Clone() : null;
      curSurfaceIndex_ = other.curSurfaceIndex_;
      diceStatus_ = other.diceStatus_;
      cheatTimes_ = other.cheatTimes_;
      dice_ = other.dice_ != null ? other.dice_.Clone() : null;
      pACDKGDHHLJ_ = other.pACDKGDHHLJ_.Clone();
      isValid_ = other.isValid_;
      lNOEKLOIEGO_ = other.lNOEKLOIEGO_ != null ? other.lNOEKLOIEGO_.Clone() : null;
      fFFJDPHGJHI_ = other.fFFJDPHGJHI_;
      curSurfaceId_ = other.curSurfaceId_;
      branchId_ = other.branchId_;
      diceType_ = other.diceType_;
      rerollTimes_ = other.rerollTimes_;
      isDone_ = other.isDone_;
      surfaceDisplayId_ = other.surfaceDisplayId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo Clone() {
      return new ChessRogueDiceInfo(this);
    }

    /// <summary>Field number for the "GDNKNGNKHJM" field.</summary>
    public const int GDNKNGNKHJMFieldNumber = 437;
    private int gDNKNGNKHJM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GDNKNGNKHJM {
      get { return gDNKNGNKHJM_; }
      set {
        gDNKNGNKHJM_ = value;
      }
    }

    /// <summary>Field number for the "cur_branch_id" field.</summary>
    public const int CurBranchIdFieldNumber = 14;
    private uint curBranchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurBranchId {
      get { return curBranchId_; }
      set {
        curBranchId_ = value;
      }
    }

    /// <summary>Field number for the "IIBOEAOEIAO" field.</summary>
    public const int IIBOEAOEIAOFieldNumber = 536;
    private global::EggLink.DanhengServer.Proto.LHMGLECCIEA iIBOEAOEIAO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.LHMGLECCIEA IIBOEAOEIAO {
      get { return iIBOEAOEIAO_; }
      set {
        iIBOEAOEIAO_ = value;
      }
    }

    /// <summary>Field number for the "cur_surface_index" field.</summary>
    public const int CurSurfaceIndexFieldNumber = 12;
    private uint curSurfaceIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurSurfaceIndex {
      get { return curSurfaceIndex_; }
      set {
        curSurfaceIndex_ = value;
      }
    }

    /// <summary>Field number for the "dice_status" field.</summary>
    public const int DiceStatusFieldNumber = 2;
    private global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus diceStatus_ = global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus DiceStatus {
      get { return diceStatus_; }
      set {
        diceStatus_ = value;
      }
    }

    /// <summary>Field number for the "cheat_times" field.</summary>
    public const int CheatTimesFieldNumber = 5;
    private uint cheatTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CheatTimes {
      get { return cheatTimes_; }
      set {
        cheatTimes_ = value;
      }
    }

    /// <summary>Field number for the "dice" field.</summary>
    public const int DiceFieldNumber = 844;
    private global::EggLink.DanhengServer.Proto.ChessRogueDice dice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDice Dice {
      get { return dice_; }
      set {
        dice_ = value;
      }
    }

    /// <summary>Field number for the "PACDKGDHHLJ" field.</summary>
    public const int PACDKGDHHLJFieldNumber = 236;
    private static readonly pb::FieldCodec<uint> _repeated_pACDKGDHHLJ_codec
        = pb::FieldCodec.ForUInt32(1890);
    private readonly pbc::RepeatedField<uint> pACDKGDHHLJ_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> PACDKGDHHLJ {
      get { return pACDKGDHHLJ_; }
    }

    /// <summary>Field number for the "is_valid" field.</summary>
    public const int IsValidFieldNumber = 11;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    /// <summary>Field number for the "LNOEKLOIEGO" field.</summary>
    public const int LNOEKLOIEGOFieldNumber = 1312;
    private global::EggLink.DanhengServer.Proto.RogueModifier lNOEKLOIEGO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.RogueModifier LNOEKLOIEGO {
      get { return lNOEKLOIEGO_; }
      set {
        lNOEKLOIEGO_ = value;
      }
    }

    /// <summary>Field number for the "FFFJDPHGJHI" field.</summary>
    public const int FFFJDPHGJHIFieldNumber = 1;
    private uint fFFJDPHGJHI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FFFJDPHGJHI {
      get { return fFFJDPHGJHI_; }
      set {
        fFFJDPHGJHI_ = value;
      }
    }

    /// <summary>Field number for the "cur_surface_id" field.</summary>
    public const int CurSurfaceIdFieldNumber = 7;
    private uint curSurfaceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurSurfaceId {
      get { return curSurfaceId_; }
      set {
        curSurfaceId_ = value;
      }
    }

    /// <summary>Field number for the "branch_id" field.</summary>
    public const int BranchIdFieldNumber = 4;
    private uint branchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    /// <summary>Field number for the "dice_type" field.</summary>
    public const int DiceTypeFieldNumber = 6;
    private global::EggLink.DanhengServer.Proto.ChessRogueDiceType diceType_ = global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDiceType DiceType {
      get { return diceType_; }
      set {
        diceType_ = value;
      }
    }

    /// <summary>Field number for the "reroll_times" field.</summary>
    public const int RerollTimesFieldNumber = 13;
    private uint rerollTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RerollTimes {
      get { return rerollTimes_; }
      set {
        rerollTimes_ = value;
      }
    }

    /// <summary>Field number for the "is_done" field.</summary>
    public const int IsDoneFieldNumber = 564;
    private bool isDone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDone {
      get { return isDone_; }
      set {
        isDone_ = value;
      }
    }

    /// <summary>Field number for the "surface_display_id" field.</summary>
    public const int SurfaceDisplayIdFieldNumber = 10;
    private uint surfaceDisplayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SurfaceDisplayId {
      get { return surfaceDisplayId_; }
      set {
        surfaceDisplayId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ChessRogueDiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ChessRogueDiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GDNKNGNKHJM != other.GDNKNGNKHJM) return false;
      if (CurBranchId != other.CurBranchId) return false;
      if (!object.Equals(IIBOEAOEIAO, other.IIBOEAOEIAO)) return false;
      if (CurSurfaceIndex != other.CurSurfaceIndex) return false;
      if (DiceStatus != other.DiceStatus) return false;
      if (CheatTimes != other.CheatTimes) return false;
      if (!object.Equals(Dice, other.Dice)) return false;
      if(!pACDKGDHHLJ_.Equals(other.pACDKGDHHLJ_)) return false;
      if (IsValid != other.IsValid) return false;
      if (!object.Equals(LNOEKLOIEGO, other.LNOEKLOIEGO)) return false;
      if (FFFJDPHGJHI != other.FFFJDPHGJHI) return false;
      if (CurSurfaceId != other.CurSurfaceId) return false;
      if (BranchId != other.BranchId) return false;
      if (DiceType != other.DiceType) return false;
      if (RerollTimes != other.RerollTimes) return false;
      if (IsDone != other.IsDone) return false;
      if (SurfaceDisplayId != other.SurfaceDisplayId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (GDNKNGNKHJM != 0) hash ^= GDNKNGNKHJM.GetHashCode();
      if (CurBranchId != 0) hash ^= CurBranchId.GetHashCode();
      if (iIBOEAOEIAO_ != null) hash ^= IIBOEAOEIAO.GetHashCode();
      if (CurSurfaceIndex != 0) hash ^= CurSurfaceIndex.GetHashCode();
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) hash ^= DiceStatus.GetHashCode();
      if (CheatTimes != 0) hash ^= CheatTimes.GetHashCode();
      if (dice_ != null) hash ^= Dice.GetHashCode();
      hash ^= pACDKGDHHLJ_.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      if (lNOEKLOIEGO_ != null) hash ^= LNOEKLOIEGO.GetHashCode();
      if (FFFJDPHGJHI != 0) hash ^= FFFJDPHGJHI.GetHashCode();
      if (CurSurfaceId != 0) hash ^= CurSurfaceId.GetHashCode();
      if (BranchId != 0) hash ^= BranchId.GetHashCode();
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) hash ^= DiceType.GetHashCode();
      if (RerollTimes != 0) hash ^= RerollTimes.GetHashCode();
      if (IsDone != false) hash ^= IsDone.GetHashCode();
      if (SurfaceDisplayId != 0) hash ^= SurfaceDisplayId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FFFJDPHGJHI != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FFFJDPHGJHI);
      }
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DiceStatus);
      }
      if (BranchId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BranchId);
      }
      if (CheatTimes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CheatTimes);
      }
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DiceType);
      }
      if (CurSurfaceId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CurSurfaceId);
      }
      if (SurfaceDisplayId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SurfaceDisplayId);
      }
      if (IsValid != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsValid);
      }
      if (CurSurfaceIndex != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CurSurfaceIndex);
      }
      if (RerollTimes != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(RerollTimes);
      }
      if (CurBranchId != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(CurBranchId);
      }
      pACDKGDHHLJ_.WriteTo(output, _repeated_pACDKGDHHLJ_codec);
      if (GDNKNGNKHJM != 0) {
        output.WriteRawTag(168, 27);
        output.WriteInt32(GDNKNGNKHJM);
      }
      if (iIBOEAOEIAO_ != null) {
        output.WriteRawTag(194, 33);
        output.WriteMessage(IIBOEAOEIAO);
      }
      if (IsDone != false) {
        output.WriteRawTag(160, 35);
        output.WriteBool(IsDone);
      }
      if (dice_ != null) {
        output.WriteRawTag(226, 52);
        output.WriteMessage(Dice);
      }
      if (lNOEKLOIEGO_ != null) {
        output.WriteRawTag(130, 82);
        output.WriteMessage(LNOEKLOIEGO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FFFJDPHGJHI != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FFFJDPHGJHI);
      }
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DiceStatus);
      }
      if (BranchId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BranchId);
      }
      if (CheatTimes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CheatTimes);
      }
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DiceType);
      }
      if (CurSurfaceId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CurSurfaceId);
      }
      if (SurfaceDisplayId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SurfaceDisplayId);
      }
      if (IsValid != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsValid);
      }
      if (CurSurfaceIndex != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CurSurfaceIndex);
      }
      if (RerollTimes != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(RerollTimes);
      }
      if (CurBranchId != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(CurBranchId);
      }
      pACDKGDHHLJ_.WriteTo(ref output, _repeated_pACDKGDHHLJ_codec);
      if (GDNKNGNKHJM != 0) {
        output.WriteRawTag(168, 27);
        output.WriteInt32(GDNKNGNKHJM);
      }
      if (iIBOEAOEIAO_ != null) {
        output.WriteRawTag(194, 33);
        output.WriteMessage(IIBOEAOEIAO);
      }
      if (IsDone != false) {
        output.WriteRawTag(160, 35);
        output.WriteBool(IsDone);
      }
      if (dice_ != null) {
        output.WriteRawTag(226, 52);
        output.WriteMessage(Dice);
      }
      if (lNOEKLOIEGO_ != null) {
        output.WriteRawTag(130, 82);
        output.WriteMessage(LNOEKLOIEGO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (GDNKNGNKHJM != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GDNKNGNKHJM);
      }
      if (CurBranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurBranchId);
      }
      if (iIBOEAOEIAO_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IIBOEAOEIAO);
      }
      if (CurSurfaceIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurSurfaceIndex);
      }
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiceStatus);
      }
      if (CheatTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheatTimes);
      }
      if (dice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dice);
      }
      size += pACDKGDHHLJ_.CalculateSize(_repeated_pACDKGDHHLJ_codec);
      if (IsValid != false) {
        size += 1 + 1;
      }
      if (lNOEKLOIEGO_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LNOEKLOIEGO);
      }
      if (FFFJDPHGJHI != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FFFJDPHGJHI);
      }
      if (CurSurfaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurSurfaceId);
      }
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiceType);
      }
      if (RerollTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RerollTimes);
      }
      if (IsDone != false) {
        size += 2 + 1;
      }
      if (SurfaceDisplayId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SurfaceDisplayId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ChessRogueDiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.GDNKNGNKHJM != 0) {
        GDNKNGNKHJM = other.GDNKNGNKHJM;
      }
      if (other.CurBranchId != 0) {
        CurBranchId = other.CurBranchId;
      }
      if (other.iIBOEAOEIAO_ != null) {
        if (iIBOEAOEIAO_ == null) {
          IIBOEAOEIAO = new global::EggLink.DanhengServer.Proto.LHMGLECCIEA();
        }
        IIBOEAOEIAO.MergeFrom(other.IIBOEAOEIAO);
      }
      if (other.CurSurfaceIndex != 0) {
        CurSurfaceIndex = other.CurSurfaceIndex;
      }
      if (other.DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        DiceStatus = other.DiceStatus;
      }
      if (other.CheatTimes != 0) {
        CheatTimes = other.CheatTimes;
      }
      if (other.dice_ != null) {
        if (dice_ == null) {
          Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
        }
        Dice.MergeFrom(other.Dice);
      }
      pACDKGDHHLJ_.Add(other.pACDKGDHHLJ_);
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
      if (other.lNOEKLOIEGO_ != null) {
        if (lNOEKLOIEGO_ == null) {
          LNOEKLOIEGO = new global::EggLink.DanhengServer.Proto.RogueModifier();
        }
        LNOEKLOIEGO.MergeFrom(other.LNOEKLOIEGO);
      }
      if (other.FFFJDPHGJHI != 0) {
        FFFJDPHGJHI = other.FFFJDPHGJHI;
      }
      if (other.CurSurfaceId != 0) {
        CurSurfaceId = other.CurSurfaceId;
      }
      if (other.BranchId != 0) {
        BranchId = other.BranchId;
      }
      if (other.DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        DiceType = other.DiceType;
      }
      if (other.RerollTimes != 0) {
        RerollTimes = other.RerollTimes;
      }
      if (other.IsDone != false) {
        IsDone = other.IsDone;
      }
      if (other.SurfaceDisplayId != 0) {
        SurfaceDisplayId = other.SurfaceDisplayId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FFFJDPHGJHI = input.ReadUInt32();
            break;
          }
          case 16: {
            DiceStatus = (global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus) input.ReadEnum();
            break;
          }
          case 32: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 40: {
            CheatTimes = input.ReadUInt32();
            break;
          }
          case 48: {
            DiceType = (global::EggLink.DanhengServer.Proto.ChessRogueDiceType) input.ReadEnum();
            break;
          }
          case 56: {
            CurSurfaceId = input.ReadUInt32();
            break;
          }
          case 80: {
            SurfaceDisplayId = input.ReadUInt32();
            break;
          }
          case 88: {
            IsValid = input.ReadBool();
            break;
          }
          case 96: {
            CurSurfaceIndex = input.ReadUInt32();
            break;
          }
          case 104: {
            RerollTimes = input.ReadUInt32();
            break;
          }
          case 112: {
            CurBranchId = input.ReadUInt32();
            break;
          }
          case 1890:
          case 1888: {
            pACDKGDHHLJ_.AddEntriesFrom(input, _repeated_pACDKGDHHLJ_codec);
            break;
          }
          case 3496: {
            GDNKNGNKHJM = input.ReadInt32();
            break;
          }
          case 4290: {
            if (iIBOEAOEIAO_ == null) {
              IIBOEAOEIAO = new global::EggLink.DanhengServer.Proto.LHMGLECCIEA();
            }
            input.ReadMessage(IIBOEAOEIAO);
            break;
          }
          case 4512: {
            IsDone = input.ReadBool();
            break;
          }
          case 6754: {
            if (dice_ == null) {
              Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
            }
            input.ReadMessage(Dice);
            break;
          }
          case 10498: {
            if (lNOEKLOIEGO_ == null) {
              LNOEKLOIEGO = new global::EggLink.DanhengServer.Proto.RogueModifier();
            }
            input.ReadMessage(LNOEKLOIEGO);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FFFJDPHGJHI = input.ReadUInt32();
            break;
          }
          case 16: {
            DiceStatus = (global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus) input.ReadEnum();
            break;
          }
          case 32: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 40: {
            CheatTimes = input.ReadUInt32();
            break;
          }
          case 48: {
            DiceType = (global::EggLink.DanhengServer.Proto.ChessRogueDiceType) input.ReadEnum();
            break;
          }
          case 56: {
            CurSurfaceId = input.ReadUInt32();
            break;
          }
          case 80: {
            SurfaceDisplayId = input.ReadUInt32();
            break;
          }
          case 88: {
            IsValid = input.ReadBool();
            break;
          }
          case 96: {
            CurSurfaceIndex = input.ReadUInt32();
            break;
          }
          case 104: {
            RerollTimes = input.ReadUInt32();
            break;
          }
          case 112: {
            CurBranchId = input.ReadUInt32();
            break;
          }
          case 1890:
          case 1888: {
            pACDKGDHHLJ_.AddEntriesFrom(ref input, _repeated_pACDKGDHHLJ_codec);
            break;
          }
          case 3496: {
            GDNKNGNKHJM = input.ReadInt32();
            break;
          }
          case 4290: {
            if (iIBOEAOEIAO_ == null) {
              IIBOEAOEIAO = new global::EggLink.DanhengServer.Proto.LHMGLECCIEA();
            }
            input.ReadMessage(IIBOEAOEIAO);
            break;
          }
          case 4512: {
            IsDone = input.ReadBool();
            break;
          }
          case 6754: {
            if (dice_ == null) {
              Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
            }
            input.ReadMessage(Dice);
            break;
          }
          case 10498: {
            if (lNOEKLOIEGO_ == null) {
              LNOEKLOIEGO = new global::EggLink.DanhengServer.Proto.RogueModifier();
            }
            input.ReadMessage(LNOEKLOIEGO);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
