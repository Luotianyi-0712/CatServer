// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MonsterBattleInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from MonsterBattleInfo.proto</summary>
  public static partial class MonsterBattleInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for MonsterBattleInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonsterBattleInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdNb25zdGVyQmF0dGxlSW5mby5wcm90bxoRR05IREtPRkhGQUkucHJvdG8a",
            "EURlYXRoU291cmNlLnByb3RvGhZTa2lsbFVzZVByb3BlcnR5LnByb3RvGhVN",
            "b25zdGVyUHJvcGVydHkucHJvdG8aGkF0dGFja0RhbWFnZVByb3BlcnR5LnBy",
            "b3RvGhFEUEJIT0lMUEVQTS5wcm90bxoVTW9uc3RlclBoYXNlU3R0LnByb3Rv",
            "GhFDQ0JMTUpDTFBBTC5wcm90byLMBgoRTW9uc3RlckJhdHRsZUluZm8SEQoJ",
            "ZW50aXR5X2lkGAEgASgNEhIKCm1vbnN0ZXJfaWQYAiABKA0SGwoTbW9uc3Rl",
            "cl90ZW1wbGF0ZV9pZBgDIAEoDRIVCg1tb25zdGVyX2xldmVsGAQgASgNEigK",
            "Dm1vbnN0ZXJfc3RhdHVzGAUgASgLMhAuTW9uc3RlclByb3BlcnR5EhMKC3Rv",
            "dGFsX3R1cm5zGAYgASgNEhQKDHRvdGFsX2RhbWFnZRgHIAEoARISCgp0b3Rh",
            "bF9oZWFsGAggASgBEhoKEnRvdGFsX2RhbWFnZV90YWtlbhgJIAEoARIhChl0",
            "b3RhbF9zdGFuY2VfZGFtYWdlX3Rha2VuGAogASgBEhgKEHRvdGFsX2hwX3Jl",
            "Y292ZXIYCyABKAESEAoIc3RhZ2VfaWQYDCABKA0SEQoJYmF0dGxlX2lkGA0g",
            "ASgNEhQKDG1vbnN0ZXJfdHlwZRgOIAEoDRIxChJhdHRhY2tfdHlwZV9kYW1h",
            "Z2UYDyADKAsyFS5BdHRhY2tEYW1hZ2VQcm9wZXJ0eRImCgtza2lsbF90aW1l",
            "cxgQIAMoCzIRLlNraWxsVXNlUHJvcGVydHkSEgoKc3RhZ2VfdHlwZRgRIAEo",
            "DRIgChh0b3RhbF9icmVha19kYW1hZ2VfdGFrZW4YEiABKAESFgoOZGVsYXlf",
            "Y3VtdWxhdGUYEyABKAESIgoMZGVhdGhfc291cmNlGBQgASgOMgwuRGVhdGhT",
            "b3VyY2USDAoEd2F2ZRgVIAEoDRIVCg1pbmRleF9pbl93YXZlGBYgASgFEg0K",
            "BXBoYXNlGBcgASgNEhEKCW1heF9waGFzZRgYIAEoDRIgCgpiYXR0bGVfdGFn",
            "GBkgASgOMgwuR05IREtPRkhGQUkSIAoKc2tpbGxfaW5mbxgaIAMoCzIMLkRQ",
            "QkhPSUxQRVBNEhMKC09BUE1KR0xDT0JEGBsgASgNEiUKC0VKR0dNQUJIRUdD",
            "GBwgAygLMhAuTW9uc3RlclBoYXNlU3R0EhMKC0FJRkNBT0NNQ0VPGB0gASgN",
            "EhMKC05IRkZKRURLRktEGB4gASgNEiEKC0xITEtLS09ES0JIGB8gASgOMgwu",
            "Q0NCTE1KQ0xQQUxCHqoCG0VnZ0xpbmsuRGFuaGVuZ1NlcnZlci5Qcm90b2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.GNHDKOFHFAIReflection.Descriptor, global::EggLink.DanhengServer.Proto.DeathSourceReflection.Descriptor, global::EggLink.DanhengServer.Proto.SkillUsePropertyReflection.Descriptor, global::EggLink.DanhengServer.Proto.MonsterPropertyReflection.Descriptor, global::EggLink.DanhengServer.Proto.AttackDamagePropertyReflection.Descriptor, global::EggLink.DanhengServer.Proto.DPBHOILPEPMReflection.Descriptor, global::EggLink.DanhengServer.Proto.MonsterPhaseSttReflection.Descriptor, global::EggLink.DanhengServer.Proto.CCBLMJCLPALReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.MonsterBattleInfo), global::EggLink.DanhengServer.Proto.MonsterBattleInfo.Parser, new[]{ "EntityId", "MonsterId", "MonsterTemplateId", "MonsterLevel", "MonsterStatus", "TotalTurns", "TotalDamage", "TotalHeal", "TotalDamageTaken", "TotalStanceDamageTaken", "TotalHpRecover", "StageId", "BattleId", "MonsterType", "AttackTypeDamage", "SkillTimes", "StageType", "TotalBreakDamageTaken", "DelayCumulate", "DeathSource", "Wave", "IndexInWave", "Phase", "MaxPhase", "BattleTag", "SkillInfo", "OAPMJGLCOBD", "EJGGMABHEGC", "AIFCAOCMCEO", "NHFFJEDKFKD", "LHLKKKODKBH" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MonsterBattleInfo : pb::IMessage<MonsterBattleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonsterBattleInfo> _parser = new pb::MessageParser<MonsterBattleInfo>(() => new MonsterBattleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MonsterBattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.MonsterBattleInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonsterBattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonsterBattleInfo(MonsterBattleInfo other) : this() {
      entityId_ = other.entityId_;
      monsterId_ = other.monsterId_;
      monsterTemplateId_ = other.monsterTemplateId_;
      monsterLevel_ = other.monsterLevel_;
      monsterStatus_ = other.monsterStatus_ != null ? other.monsterStatus_.Clone() : null;
      totalTurns_ = other.totalTurns_;
      totalDamage_ = other.totalDamage_;
      totalHeal_ = other.totalHeal_;
      totalDamageTaken_ = other.totalDamageTaken_;
      totalStanceDamageTaken_ = other.totalStanceDamageTaken_;
      totalHpRecover_ = other.totalHpRecover_;
      stageId_ = other.stageId_;
      battleId_ = other.battleId_;
      monsterType_ = other.monsterType_;
      attackTypeDamage_ = other.attackTypeDamage_.Clone();
      skillTimes_ = other.skillTimes_.Clone();
      stageType_ = other.stageType_;
      totalBreakDamageTaken_ = other.totalBreakDamageTaken_;
      delayCumulate_ = other.delayCumulate_;
      deathSource_ = other.deathSource_;
      wave_ = other.wave_;
      indexInWave_ = other.indexInWave_;
      phase_ = other.phase_;
      maxPhase_ = other.maxPhase_;
      battleTag_ = other.battleTag_;
      skillInfo_ = other.skillInfo_.Clone();
      oAPMJGLCOBD_ = other.oAPMJGLCOBD_;
      eJGGMABHEGC_ = other.eJGGMABHEGC_.Clone();
      aIFCAOCMCEO_ = other.aIFCAOCMCEO_;
      nHFFJEDKFKD_ = other.nHFFJEDKFKD_;
      lHLKKKODKBH_ = other.lHLKKKODKBH_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonsterBattleInfo Clone() {
      return new MonsterBattleInfo(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private uint monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "monster_template_id" field.</summary>
    public const int MonsterTemplateIdFieldNumber = 3;
    private uint monsterTemplateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonsterTemplateId {
      get { return monsterTemplateId_; }
      set {
        monsterTemplateId_ = value;
      }
    }

    /// <summary>Field number for the "monster_level" field.</summary>
    public const int MonsterLevelFieldNumber = 4;
    private uint monsterLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonsterLevel {
      get { return monsterLevel_; }
      set {
        monsterLevel_ = value;
      }
    }

    /// <summary>Field number for the "monster_status" field.</summary>
    public const int MonsterStatusFieldNumber = 5;
    private global::EggLink.DanhengServer.Proto.MonsterProperty monsterStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.MonsterProperty MonsterStatus {
      get { return monsterStatus_; }
      set {
        monsterStatus_ = value;
      }
    }

    /// <summary>Field number for the "total_turns" field.</summary>
    public const int TotalTurnsFieldNumber = 6;
    private uint totalTurns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TotalTurns {
      get { return totalTurns_; }
      set {
        totalTurns_ = value;
      }
    }

    /// <summary>Field number for the "total_damage" field.</summary>
    public const int TotalDamageFieldNumber = 7;
    private double totalDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalDamage {
      get { return totalDamage_; }
      set {
        totalDamage_ = value;
      }
    }

    /// <summary>Field number for the "total_heal" field.</summary>
    public const int TotalHealFieldNumber = 8;
    private double totalHeal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalHeal {
      get { return totalHeal_; }
      set {
        totalHeal_ = value;
      }
    }

    /// <summary>Field number for the "total_damage_taken" field.</summary>
    public const int TotalDamageTakenFieldNumber = 9;
    private double totalDamageTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalDamageTaken {
      get { return totalDamageTaken_; }
      set {
        totalDamageTaken_ = value;
      }
    }

    /// <summary>Field number for the "total_stance_damage_taken" field.</summary>
    public const int TotalStanceDamageTakenFieldNumber = 10;
    private double totalStanceDamageTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalStanceDamageTaken {
      get { return totalStanceDamageTaken_; }
      set {
        totalStanceDamageTaken_ = value;
      }
    }

    /// <summary>Field number for the "total_hp_recover" field.</summary>
    public const int TotalHpRecoverFieldNumber = 11;
    private double totalHpRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalHpRecover {
      get { return totalHpRecover_; }
      set {
        totalHpRecover_ = value;
      }
    }

    /// <summary>Field number for the "stage_id" field.</summary>
    public const int StageIdFieldNumber = 12;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 13;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "monster_type" field.</summary>
    public const int MonsterTypeFieldNumber = 14;
    private uint monsterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonsterType {
      get { return monsterType_; }
      set {
        monsterType_ = value;
      }
    }

    /// <summary>Field number for the "attack_type_damage" field.</summary>
    public const int AttackTypeDamageFieldNumber = 15;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.AttackDamageProperty> _repeated_attackTypeDamage_codec
        = pb::FieldCodec.ForMessage(122, global::EggLink.DanhengServer.Proto.AttackDamageProperty.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.AttackDamageProperty> attackTypeDamage_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.AttackDamageProperty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.AttackDamageProperty> AttackTypeDamage {
      get { return attackTypeDamage_; }
    }

    /// <summary>Field number for the "skill_times" field.</summary>
    public const int SkillTimesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.SkillUseProperty> _repeated_skillTimes_codec
        = pb::FieldCodec.ForMessage(130, global::EggLink.DanhengServer.Proto.SkillUseProperty.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.SkillUseProperty> skillTimes_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.SkillUseProperty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.SkillUseProperty> SkillTimes {
      get { return skillTimes_; }
    }

    /// <summary>Field number for the "stage_type" field.</summary>
    public const int StageTypeFieldNumber = 17;
    private uint stageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    /// <summary>Field number for the "total_break_damage_taken" field.</summary>
    public const int TotalBreakDamageTakenFieldNumber = 18;
    private double totalBreakDamageTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalBreakDamageTaken {
      get { return totalBreakDamageTaken_; }
      set {
        totalBreakDamageTaken_ = value;
      }
    }

    /// <summary>Field number for the "delay_cumulate" field.</summary>
    public const int DelayCumulateFieldNumber = 19;
    private double delayCumulate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DelayCumulate {
      get { return delayCumulate_; }
      set {
        delayCumulate_ = value;
      }
    }

    /// <summary>Field number for the "death_source" field.</summary>
    public const int DeathSourceFieldNumber = 20;
    private global::EggLink.DanhengServer.Proto.DeathSource deathSource_ = global::EggLink.DanhengServer.Proto.DeathSource.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.DeathSource DeathSource {
      get { return deathSource_; }
      set {
        deathSource_ = value;
      }
    }

    /// <summary>Field number for the "wave" field.</summary>
    public const int WaveFieldNumber = 21;
    private uint wave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Wave {
      get { return wave_; }
      set {
        wave_ = value;
      }
    }

    /// <summary>Field number for the "index_in_wave" field.</summary>
    public const int IndexInWaveFieldNumber = 22;
    private int indexInWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IndexInWave {
      get { return indexInWave_; }
      set {
        indexInWave_ = value;
      }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 23;
    private uint phase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "max_phase" field.</summary>
    public const int MaxPhaseFieldNumber = 24;
    private uint maxPhase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxPhase {
      get { return maxPhase_; }
      set {
        maxPhase_ = value;
      }
    }

    /// <summary>Field number for the "battle_tag" field.</summary>
    public const int BattleTagFieldNumber = 25;
    private global::EggLink.DanhengServer.Proto.GNHDKOFHFAI battleTag_ = global::EggLink.DanhengServer.Proto.GNHDKOFHFAI.TagNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.GNHDKOFHFAI BattleTag {
      get { return battleTag_; }
      set {
        battleTag_ = value;
      }
    }

    /// <summary>Field number for the "skill_info" field.</summary>
    public const int SkillInfoFieldNumber = 26;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.DPBHOILPEPM> _repeated_skillInfo_codec
        = pb::FieldCodec.ForMessage(210, global::EggLink.DanhengServer.Proto.DPBHOILPEPM.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DPBHOILPEPM> skillInfo_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DPBHOILPEPM>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DPBHOILPEPM> SkillInfo {
      get { return skillInfo_; }
    }

    /// <summary>Field number for the "OAPMJGLCOBD" field.</summary>
    public const int OAPMJGLCOBDFieldNumber = 27;
    private uint oAPMJGLCOBD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OAPMJGLCOBD {
      get { return oAPMJGLCOBD_; }
      set {
        oAPMJGLCOBD_ = value;
      }
    }

    /// <summary>Field number for the "EJGGMABHEGC" field.</summary>
    public const int EJGGMABHEGCFieldNumber = 28;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.MonsterPhaseStt> _repeated_eJGGMABHEGC_codec
        = pb::FieldCodec.ForMessage(226, global::EggLink.DanhengServer.Proto.MonsterPhaseStt.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MonsterPhaseStt> eJGGMABHEGC_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MonsterPhaseStt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MonsterPhaseStt> EJGGMABHEGC {
      get { return eJGGMABHEGC_; }
    }

    /// <summary>Field number for the "AIFCAOCMCEO" field.</summary>
    public const int AIFCAOCMCEOFieldNumber = 29;
    private uint aIFCAOCMCEO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AIFCAOCMCEO {
      get { return aIFCAOCMCEO_; }
      set {
        aIFCAOCMCEO_ = value;
      }
    }

    /// <summary>Field number for the "NHFFJEDKFKD" field.</summary>
    public const int NHFFJEDKFKDFieldNumber = 30;
    private uint nHFFJEDKFKD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NHFFJEDKFKD {
      get { return nHFFJEDKFKD_; }
      set {
        nHFFJEDKFKD_ = value;
      }
    }

    /// <summary>Field number for the "LHLKKKODKBH" field.</summary>
    public const int LHLKKKODKBHFieldNumber = 31;
    private global::EggLink.DanhengServer.Proto.CCBLMJCLPAL lHLKKKODKBH_ = global::EggLink.DanhengServer.Proto.CCBLMJCLPAL.NormalCreate;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.CCBLMJCLPAL LHLKKKODKBH {
      get { return lHLKKKODKBH_; }
      set {
        lHLKKKODKBH_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MonsterBattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MonsterBattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (MonsterId != other.MonsterId) return false;
      if (MonsterTemplateId != other.MonsterTemplateId) return false;
      if (MonsterLevel != other.MonsterLevel) return false;
      if (!object.Equals(MonsterStatus, other.MonsterStatus)) return false;
      if (TotalTurns != other.TotalTurns) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalDamage, other.TotalDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalHeal, other.TotalHeal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalDamageTaken, other.TotalDamageTaken)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalStanceDamageTaken, other.TotalStanceDamageTaken)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalHpRecover, other.TotalHpRecover)) return false;
      if (StageId != other.StageId) return false;
      if (BattleId != other.BattleId) return false;
      if (MonsterType != other.MonsterType) return false;
      if(!attackTypeDamage_.Equals(other.attackTypeDamage_)) return false;
      if(!skillTimes_.Equals(other.skillTimes_)) return false;
      if (StageType != other.StageType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalBreakDamageTaken, other.TotalBreakDamageTaken)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DelayCumulate, other.DelayCumulate)) return false;
      if (DeathSource != other.DeathSource) return false;
      if (Wave != other.Wave) return false;
      if (IndexInWave != other.IndexInWave) return false;
      if (Phase != other.Phase) return false;
      if (MaxPhase != other.MaxPhase) return false;
      if (BattleTag != other.BattleTag) return false;
      if(!skillInfo_.Equals(other.skillInfo_)) return false;
      if (OAPMJGLCOBD != other.OAPMJGLCOBD) return false;
      if(!eJGGMABHEGC_.Equals(other.eJGGMABHEGC_)) return false;
      if (AIFCAOCMCEO != other.AIFCAOCMCEO) return false;
      if (NHFFJEDKFKD != other.NHFFJEDKFKD) return false;
      if (LHLKKKODKBH != other.LHLKKKODKBH) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0) hash ^= EntityId.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (MonsterTemplateId != 0) hash ^= MonsterTemplateId.GetHashCode();
      if (MonsterLevel != 0) hash ^= MonsterLevel.GetHashCode();
      if (monsterStatus_ != null) hash ^= MonsterStatus.GetHashCode();
      if (TotalTurns != 0) hash ^= TotalTurns.GetHashCode();
      if (TotalDamage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalDamage);
      if (TotalHeal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalHeal);
      if (TotalDamageTaken != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalDamageTaken);
      if (TotalStanceDamageTaken != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalStanceDamageTaken);
      if (TotalHpRecover != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalHpRecover);
      if (StageId != 0) hash ^= StageId.GetHashCode();
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (MonsterType != 0) hash ^= MonsterType.GetHashCode();
      hash ^= attackTypeDamage_.GetHashCode();
      hash ^= skillTimes_.GetHashCode();
      if (StageType != 0) hash ^= StageType.GetHashCode();
      if (TotalBreakDamageTaken != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalBreakDamageTaken);
      if (DelayCumulate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DelayCumulate);
      if (DeathSource != global::EggLink.DanhengServer.Proto.DeathSource.Unknown) hash ^= DeathSource.GetHashCode();
      if (Wave != 0) hash ^= Wave.GetHashCode();
      if (IndexInWave != 0) hash ^= IndexInWave.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (MaxPhase != 0) hash ^= MaxPhase.GetHashCode();
      if (BattleTag != global::EggLink.DanhengServer.Proto.GNHDKOFHFAI.TagNone) hash ^= BattleTag.GetHashCode();
      hash ^= skillInfo_.GetHashCode();
      if (OAPMJGLCOBD != 0) hash ^= OAPMJGLCOBD.GetHashCode();
      hash ^= eJGGMABHEGC_.GetHashCode();
      if (AIFCAOCMCEO != 0) hash ^= AIFCAOCMCEO.GetHashCode();
      if (NHFFJEDKFKD != 0) hash ^= NHFFJEDKFKD.GetHashCode();
      if (LHLKKKODKBH != global::EggLink.DanhengServer.Proto.CCBLMJCLPAL.NormalCreate) hash ^= LHLKKKODKBH.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MonsterId);
      }
      if (MonsterTemplateId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MonsterTemplateId);
      }
      if (MonsterLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MonsterLevel);
      }
      if (monsterStatus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MonsterStatus);
      }
      if (TotalTurns != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalTurns);
      }
      if (TotalDamage != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TotalDamage);
      }
      if (TotalHeal != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TotalHeal);
      }
      if (TotalDamageTaken != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TotalDamageTaken);
      }
      if (TotalStanceDamageTaken != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(TotalStanceDamageTaken);
      }
      if (TotalHpRecover != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(TotalHpRecover);
      }
      if (StageId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(StageId);
      }
      if (BattleId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(BattleId);
      }
      if (MonsterType != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MonsterType);
      }
      attackTypeDamage_.WriteTo(output, _repeated_attackTypeDamage_codec);
      skillTimes_.WriteTo(output, _repeated_skillTimes_codec);
      if (StageType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(StageType);
      }
      if (TotalBreakDamageTaken != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(TotalBreakDamageTaken);
      }
      if (DelayCumulate != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(DelayCumulate);
      }
      if (DeathSource != global::EggLink.DanhengServer.Proto.DeathSource.Unknown) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DeathSource);
      }
      if (Wave != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Wave);
      }
      if (IndexInWave != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(IndexInWave);
      }
      if (Phase != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Phase);
      }
      if (MaxPhase != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(MaxPhase);
      }
      if (BattleTag != global::EggLink.DanhengServer.Proto.GNHDKOFHFAI.TagNone) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) BattleTag);
      }
      skillInfo_.WriteTo(output, _repeated_skillInfo_codec);
      if (OAPMJGLCOBD != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(OAPMJGLCOBD);
      }
      eJGGMABHEGC_.WriteTo(output, _repeated_eJGGMABHEGC_codec);
      if (AIFCAOCMCEO != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(AIFCAOCMCEO);
      }
      if (NHFFJEDKFKD != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(NHFFJEDKFKD);
      }
      if (LHLKKKODKBH != global::EggLink.DanhengServer.Proto.CCBLMJCLPAL.NormalCreate) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) LHLKKKODKBH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MonsterId);
      }
      if (MonsterTemplateId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MonsterTemplateId);
      }
      if (MonsterLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MonsterLevel);
      }
      if (monsterStatus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MonsterStatus);
      }
      if (TotalTurns != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalTurns);
      }
      if (TotalDamage != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TotalDamage);
      }
      if (TotalHeal != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TotalHeal);
      }
      if (TotalDamageTaken != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TotalDamageTaken);
      }
      if (TotalStanceDamageTaken != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(TotalStanceDamageTaken);
      }
      if (TotalHpRecover != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(TotalHpRecover);
      }
      if (StageId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(StageId);
      }
      if (BattleId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(BattleId);
      }
      if (MonsterType != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MonsterType);
      }
      attackTypeDamage_.WriteTo(ref output, _repeated_attackTypeDamage_codec);
      skillTimes_.WriteTo(ref output, _repeated_skillTimes_codec);
      if (StageType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(StageType);
      }
      if (TotalBreakDamageTaken != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(TotalBreakDamageTaken);
      }
      if (DelayCumulate != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(DelayCumulate);
      }
      if (DeathSource != global::EggLink.DanhengServer.Proto.DeathSource.Unknown) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DeathSource);
      }
      if (Wave != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Wave);
      }
      if (IndexInWave != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(IndexInWave);
      }
      if (Phase != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Phase);
      }
      if (MaxPhase != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(MaxPhase);
      }
      if (BattleTag != global::EggLink.DanhengServer.Proto.GNHDKOFHFAI.TagNone) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) BattleTag);
      }
      skillInfo_.WriteTo(ref output, _repeated_skillInfo_codec);
      if (OAPMJGLCOBD != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(OAPMJGLCOBD);
      }
      eJGGMABHEGC_.WriteTo(ref output, _repeated_eJGGMABHEGC_codec);
      if (AIFCAOCMCEO != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(AIFCAOCMCEO);
      }
      if (NHFFJEDKFKD != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(NHFFJEDKFKD);
      }
      if (LHLKKKODKBH != global::EggLink.DanhengServer.Proto.CCBLMJCLPAL.NormalCreate) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) LHLKKKODKBH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
      }
      if (MonsterTemplateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterTemplateId);
      }
      if (MonsterLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterLevel);
      }
      if (monsterStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonsterStatus);
      }
      if (TotalTurns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTurns);
      }
      if (TotalDamage != 0D) {
        size += 1 + 8;
      }
      if (TotalHeal != 0D) {
        size += 1 + 8;
      }
      if (TotalDamageTaken != 0D) {
        size += 1 + 8;
      }
      if (TotalStanceDamageTaken != 0D) {
        size += 1 + 8;
      }
      if (TotalHpRecover != 0D) {
        size += 1 + 8;
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (MonsterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterType);
      }
      size += attackTypeDamage_.CalculateSize(_repeated_attackTypeDamage_codec);
      size += skillTimes_.CalculateSize(_repeated_skillTimes_codec);
      if (StageType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StageType);
      }
      if (TotalBreakDamageTaken != 0D) {
        size += 2 + 8;
      }
      if (DelayCumulate != 0D) {
        size += 2 + 8;
      }
      if (DeathSource != global::EggLink.DanhengServer.Proto.DeathSource.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DeathSource);
      }
      if (Wave != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Wave);
      }
      if (IndexInWave != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndexInWave);
      }
      if (Phase != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Phase);
      }
      if (MaxPhase != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxPhase);
      }
      if (BattleTag != global::EggLink.DanhengServer.Proto.GNHDKOFHFAI.TagNone) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BattleTag);
      }
      size += skillInfo_.CalculateSize(_repeated_skillInfo_codec);
      if (OAPMJGLCOBD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OAPMJGLCOBD);
      }
      size += eJGGMABHEGC_.CalculateSize(_repeated_eJGGMABHEGC_codec);
      if (AIFCAOCMCEO != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AIFCAOCMCEO);
      }
      if (NHFFJEDKFKD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NHFFJEDKFKD);
      }
      if (LHLKKKODKBH != global::EggLink.DanhengServer.Proto.CCBLMJCLPAL.NormalCreate) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LHLKKKODKBH);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MonsterBattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0) {
        EntityId = other.EntityId;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.MonsterTemplateId != 0) {
        MonsterTemplateId = other.MonsterTemplateId;
      }
      if (other.MonsterLevel != 0) {
        MonsterLevel = other.MonsterLevel;
      }
      if (other.monsterStatus_ != null) {
        if (monsterStatus_ == null) {
          MonsterStatus = new global::EggLink.DanhengServer.Proto.MonsterProperty();
        }
        MonsterStatus.MergeFrom(other.MonsterStatus);
      }
      if (other.TotalTurns != 0) {
        TotalTurns = other.TotalTurns;
      }
      if (other.TotalDamage != 0D) {
        TotalDamage = other.TotalDamage;
      }
      if (other.TotalHeal != 0D) {
        TotalHeal = other.TotalHeal;
      }
      if (other.TotalDamageTaken != 0D) {
        TotalDamageTaken = other.TotalDamageTaken;
      }
      if (other.TotalStanceDamageTaken != 0D) {
        TotalStanceDamageTaken = other.TotalStanceDamageTaken;
      }
      if (other.TotalHpRecover != 0D) {
        TotalHpRecover = other.TotalHpRecover;
      }
      if (other.StageId != 0) {
        StageId = other.StageId;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.MonsterType != 0) {
        MonsterType = other.MonsterType;
      }
      attackTypeDamage_.Add(other.attackTypeDamage_);
      skillTimes_.Add(other.skillTimes_);
      if (other.StageType != 0) {
        StageType = other.StageType;
      }
      if (other.TotalBreakDamageTaken != 0D) {
        TotalBreakDamageTaken = other.TotalBreakDamageTaken;
      }
      if (other.DelayCumulate != 0D) {
        DelayCumulate = other.DelayCumulate;
      }
      if (other.DeathSource != global::EggLink.DanhengServer.Proto.DeathSource.Unknown) {
        DeathSource = other.DeathSource;
      }
      if (other.Wave != 0) {
        Wave = other.Wave;
      }
      if (other.IndexInWave != 0) {
        IndexInWave = other.IndexInWave;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.MaxPhase != 0) {
        MaxPhase = other.MaxPhase;
      }
      if (other.BattleTag != global::EggLink.DanhengServer.Proto.GNHDKOFHFAI.TagNone) {
        BattleTag = other.BattleTag;
      }
      skillInfo_.Add(other.skillInfo_);
      if (other.OAPMJGLCOBD != 0) {
        OAPMJGLCOBD = other.OAPMJGLCOBD;
      }
      eJGGMABHEGC_.Add(other.eJGGMABHEGC_);
      if (other.AIFCAOCMCEO != 0) {
        AIFCAOCMCEO = other.AIFCAOCMCEO;
      }
      if (other.NHFFJEDKFKD != 0) {
        NHFFJEDKFKD = other.NHFFJEDKFKD;
      }
      if (other.LHLKKKODKBH != global::EggLink.DanhengServer.Proto.CCBLMJCLPAL.NormalCreate) {
        LHLKKKODKBH = other.LHLKKKODKBH;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadUInt32();
            break;
          }
          case 24: {
            MonsterTemplateId = input.ReadUInt32();
            break;
          }
          case 32: {
            MonsterLevel = input.ReadUInt32();
            break;
          }
          case 42: {
            if (monsterStatus_ == null) {
              MonsterStatus = new global::EggLink.DanhengServer.Proto.MonsterProperty();
            }
            input.ReadMessage(MonsterStatus);
            break;
          }
          case 48: {
            TotalTurns = input.ReadUInt32();
            break;
          }
          case 57: {
            TotalDamage = input.ReadDouble();
            break;
          }
          case 65: {
            TotalHeal = input.ReadDouble();
            break;
          }
          case 73: {
            TotalDamageTaken = input.ReadDouble();
            break;
          }
          case 81: {
            TotalStanceDamageTaken = input.ReadDouble();
            break;
          }
          case 89: {
            TotalHpRecover = input.ReadDouble();
            break;
          }
          case 96: {
            StageId = input.ReadUInt32();
            break;
          }
          case 104: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 112: {
            MonsterType = input.ReadUInt32();
            break;
          }
          case 122: {
            attackTypeDamage_.AddEntriesFrom(input, _repeated_attackTypeDamage_codec);
            break;
          }
          case 130: {
            skillTimes_.AddEntriesFrom(input, _repeated_skillTimes_codec);
            break;
          }
          case 136: {
            StageType = input.ReadUInt32();
            break;
          }
          case 145: {
            TotalBreakDamageTaken = input.ReadDouble();
            break;
          }
          case 153: {
            DelayCumulate = input.ReadDouble();
            break;
          }
          case 160: {
            DeathSource = (global::EggLink.DanhengServer.Proto.DeathSource) input.ReadEnum();
            break;
          }
          case 168: {
            Wave = input.ReadUInt32();
            break;
          }
          case 176: {
            IndexInWave = input.ReadInt32();
            break;
          }
          case 184: {
            Phase = input.ReadUInt32();
            break;
          }
          case 192: {
            MaxPhase = input.ReadUInt32();
            break;
          }
          case 200: {
            BattleTag = (global::EggLink.DanhengServer.Proto.GNHDKOFHFAI) input.ReadEnum();
            break;
          }
          case 210: {
            skillInfo_.AddEntriesFrom(input, _repeated_skillInfo_codec);
            break;
          }
          case 216: {
            OAPMJGLCOBD = input.ReadUInt32();
            break;
          }
          case 226: {
            eJGGMABHEGC_.AddEntriesFrom(input, _repeated_eJGGMABHEGC_codec);
            break;
          }
          case 232: {
            AIFCAOCMCEO = input.ReadUInt32();
            break;
          }
          case 240: {
            NHFFJEDKFKD = input.ReadUInt32();
            break;
          }
          case 248: {
            LHLKKKODKBH = (global::EggLink.DanhengServer.Proto.CCBLMJCLPAL) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadUInt32();
            break;
          }
          case 24: {
            MonsterTemplateId = input.ReadUInt32();
            break;
          }
          case 32: {
            MonsterLevel = input.ReadUInt32();
            break;
          }
          case 42: {
            if (monsterStatus_ == null) {
              MonsterStatus = new global::EggLink.DanhengServer.Proto.MonsterProperty();
            }
            input.ReadMessage(MonsterStatus);
            break;
          }
          case 48: {
            TotalTurns = input.ReadUInt32();
            break;
          }
          case 57: {
            TotalDamage = input.ReadDouble();
            break;
          }
          case 65: {
            TotalHeal = input.ReadDouble();
            break;
          }
          case 73: {
            TotalDamageTaken = input.ReadDouble();
            break;
          }
          case 81: {
            TotalStanceDamageTaken = input.ReadDouble();
            break;
          }
          case 89: {
            TotalHpRecover = input.ReadDouble();
            break;
          }
          case 96: {
            StageId = input.ReadUInt32();
            break;
          }
          case 104: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 112: {
            MonsterType = input.ReadUInt32();
            break;
          }
          case 122: {
            attackTypeDamage_.AddEntriesFrom(ref input, _repeated_attackTypeDamage_codec);
            break;
          }
          case 130: {
            skillTimes_.AddEntriesFrom(ref input, _repeated_skillTimes_codec);
            break;
          }
          case 136: {
            StageType = input.ReadUInt32();
            break;
          }
          case 145: {
            TotalBreakDamageTaken = input.ReadDouble();
            break;
          }
          case 153: {
            DelayCumulate = input.ReadDouble();
            break;
          }
          case 160: {
            DeathSource = (global::EggLink.DanhengServer.Proto.DeathSource) input.ReadEnum();
            break;
          }
          case 168: {
            Wave = input.ReadUInt32();
            break;
          }
          case 176: {
            IndexInWave = input.ReadInt32();
            break;
          }
          case 184: {
            Phase = input.ReadUInt32();
            break;
          }
          case 192: {
            MaxPhase = input.ReadUInt32();
            break;
          }
          case 200: {
            BattleTag = (global::EggLink.DanhengServer.Proto.GNHDKOFHFAI) input.ReadEnum();
            break;
          }
          case 210: {
            skillInfo_.AddEntriesFrom(ref input, _repeated_skillInfo_codec);
            break;
          }
          case 216: {
            OAPMJGLCOBD = input.ReadUInt32();
            break;
          }
          case 226: {
            eJGGMABHEGC_.AddEntriesFrom(ref input, _repeated_eJGGMABHEGC_codec);
            break;
          }
          case 232: {
            AIFCAOCMCEO = input.ReadUInt32();
            break;
          }
          case 240: {
            NHFFJEDKFKD = input.ReadUInt32();
            break;
          }
          case 248: {
            LHLKKKODKBH = (global::EggLink.DanhengServer.Proto.CCBLMJCLPAL) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
