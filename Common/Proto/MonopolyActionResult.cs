// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MonopolyActionResult.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from MonopolyActionResult.proto</summary>
  public static partial class MonopolyActionResultReflection {

    #region Descriptor
    /// <summary>File descriptor for MonopolyActionResult.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonopolyActionResultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpNb25vcG9seUFjdGlvblJlc3VsdC5wcm90bxokTW9ub3BvbHlBY3Rpb25S",
            "ZXN1bHRTb3VyY2VUeXBlLnByb3RvGhFIQ0RQR09FQkpKTi5wcm90byLdAQoU",
            "TW9ub3BvbHlBY3Rpb25SZXN1bHQSFgoOdHJpZ2dlcl9tYXBfaWQYCiABKA0S",
            "NAoLc291cmNlX3R5cGUYDiABKA4yHy5Nb25vcG9seUFjdGlvblJlc3VsdFNv",
            "dXJjZVR5cGUSFQoNY2xpY2tfY2VsbF9pZBgIIAEoDRITCgtlZmZlY3RfdHlw",
            "ZRgDIAEoDRIXCg90cmlnZ2VyX2NlbGxfaWQYDCABKA0SFAoMY2xpY2tfbWFw",
            "X2lkGAUgASgNEhwKBmRldGFpbBgBIAEoCzIMLkhDRFBHT0VCSkpOQh6qAhtF",
            "Z2dMaW5rLkRhbmhlbmdTZXJ2ZXIuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceTypeReflection.Descriptor, global::EggLink.DanhengServer.Proto.HCDPGOEBJJNReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.MonopolyActionResult), global::EggLink.DanhengServer.Proto.MonopolyActionResult.Parser, new[]{ "TriggerMapId", "SourceType", "ClickCellId", "EffectType", "TriggerCellId", "ClickMapId", "Detail" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MonopolyActionResult : pb::IMessage<MonopolyActionResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyActionResult> _parser = new pb::MessageParser<MonopolyActionResult>(() => new MonopolyActionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MonopolyActionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.MonopolyActionResultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonopolyActionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonopolyActionResult(MonopolyActionResult other) : this() {
      triggerMapId_ = other.triggerMapId_;
      sourceType_ = other.sourceType_;
      clickCellId_ = other.clickCellId_;
      effectType_ = other.effectType_;
      triggerCellId_ = other.triggerCellId_;
      clickMapId_ = other.clickMapId_;
      detail_ = other.detail_ != null ? other.detail_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonopolyActionResult Clone() {
      return new MonopolyActionResult(this);
    }

    /// <summary>Field number for the "trigger_map_id" field.</summary>
    public const int TriggerMapIdFieldNumber = 10;
    private uint triggerMapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TriggerMapId {
      get { return triggerMapId_; }
      set {
        triggerMapId_ = value;
      }
    }

    /// <summary>Field number for the "source_type" field.</summary>
    public const int SourceTypeFieldNumber = 14;
    private global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType sourceType_ = global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType SourceType {
      get { return sourceType_; }
      set {
        sourceType_ = value;
      }
    }

    /// <summary>Field number for the "click_cell_id" field.</summary>
    public const int ClickCellIdFieldNumber = 8;
    private uint clickCellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClickCellId {
      get { return clickCellId_; }
      set {
        clickCellId_ = value;
      }
    }

    /// <summary>Field number for the "effect_type" field.</summary>
    public const int EffectTypeFieldNumber = 3;
    private uint effectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint EffectType {
      get { return effectType_; }
      set {
        effectType_ = value;
      }
    }

    /// <summary>Field number for the "trigger_cell_id" field.</summary>
    public const int TriggerCellIdFieldNumber = 12;
    private uint triggerCellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TriggerCellId {
      get { return triggerCellId_; }
      set {
        triggerCellId_ = value;
      }
    }

    /// <summary>Field number for the "click_map_id" field.</summary>
    public const int ClickMapIdFieldNumber = 5;
    private uint clickMapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClickMapId {
      get { return clickMapId_; }
      set {
        clickMapId_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 1;
    private global::EggLink.DanhengServer.Proto.HCDPGOEBJJN detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.HCDPGOEBJJN Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MonopolyActionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MonopolyActionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerMapId != other.TriggerMapId) return false;
      if (SourceType != other.SourceType) return false;
      if (ClickCellId != other.ClickCellId) return false;
      if (EffectType != other.EffectType) return false;
      if (TriggerCellId != other.TriggerCellId) return false;
      if (ClickMapId != other.ClickMapId) return false;
      if (!object.Equals(Detail, other.Detail)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerMapId != 0) hash ^= TriggerMapId.GetHashCode();
      if (SourceType != global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType.None) hash ^= SourceType.GetHashCode();
      if (ClickCellId != 0) hash ^= ClickCellId.GetHashCode();
      if (EffectType != 0) hash ^= EffectType.GetHashCode();
      if (TriggerCellId != 0) hash ^= TriggerCellId.GetHashCode();
      if (ClickMapId != 0) hash ^= ClickMapId.GetHashCode();
      if (detail_ != null) hash ^= Detail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (detail_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Detail);
      }
      if (EffectType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EffectType);
      }
      if (ClickMapId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ClickMapId);
      }
      if (ClickCellId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ClickCellId);
      }
      if (TriggerMapId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TriggerMapId);
      }
      if (TriggerCellId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(TriggerCellId);
      }
      if (SourceType != global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType.None) {
        output.WriteRawTag(112);
        output.WriteEnum((int) SourceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (detail_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Detail);
      }
      if (EffectType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EffectType);
      }
      if (ClickMapId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ClickMapId);
      }
      if (ClickCellId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ClickCellId);
      }
      if (TriggerMapId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TriggerMapId);
      }
      if (TriggerCellId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(TriggerCellId);
      }
      if (SourceType != global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType.None) {
        output.WriteRawTag(112);
        output.WriteEnum((int) SourceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TriggerMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TriggerMapId);
      }
      if (SourceType != global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SourceType);
      }
      if (ClickCellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClickCellId);
      }
      if (EffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectType);
      }
      if (TriggerCellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TriggerCellId);
      }
      if (ClickMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClickMapId);
      }
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MonopolyActionResult other) {
      if (other == null) {
        return;
      }
      if (other.TriggerMapId != 0) {
        TriggerMapId = other.TriggerMapId;
      }
      if (other.SourceType != global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType.None) {
        SourceType = other.SourceType;
      }
      if (other.ClickCellId != 0) {
        ClickCellId = other.ClickCellId;
      }
      if (other.EffectType != 0) {
        EffectType = other.EffectType;
      }
      if (other.TriggerCellId != 0) {
        TriggerCellId = other.TriggerCellId;
      }
      if (other.ClickMapId != 0) {
        ClickMapId = other.ClickMapId;
      }
      if (other.detail_ != null) {
        if (detail_ == null) {
          Detail = new global::EggLink.DanhengServer.Proto.HCDPGOEBJJN();
        }
        Detail.MergeFrom(other.Detail);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (detail_ == null) {
              Detail = new global::EggLink.DanhengServer.Proto.HCDPGOEBJJN();
            }
            input.ReadMessage(Detail);
            break;
          }
          case 24: {
            EffectType = input.ReadUInt32();
            break;
          }
          case 40: {
            ClickMapId = input.ReadUInt32();
            break;
          }
          case 64: {
            ClickCellId = input.ReadUInt32();
            break;
          }
          case 80: {
            TriggerMapId = input.ReadUInt32();
            break;
          }
          case 96: {
            TriggerCellId = input.ReadUInt32();
            break;
          }
          case 112: {
            SourceType = (global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (detail_ == null) {
              Detail = new global::EggLink.DanhengServer.Proto.HCDPGOEBJJN();
            }
            input.ReadMessage(Detail);
            break;
          }
          case 24: {
            EffectType = input.ReadUInt32();
            break;
          }
          case 40: {
            ClickMapId = input.ReadUInt32();
            break;
          }
          case 64: {
            ClickCellId = input.ReadUInt32();
            break;
          }
          case 80: {
            TriggerMapId = input.ReadUInt32();
            break;
          }
          case 96: {
            TriggerCellId = input.ReadUInt32();
            break;
          }
          case 112: {
            SourceType = (global::EggLink.DanhengServer.Proto.MonopolyActionResultSourceType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
